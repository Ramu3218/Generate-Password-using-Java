package mypack;


import java.security.SecureRandom;  
import java.util.Collections;  
import java.util.List;  
import java.util.Random;  
import java.util.stream.Collectors;  
import java.util.stream.IntStream;  
import java.util.stream.Stream;  
 
//create class password
public class GPassword {  
     
   
   public static void main(String args[]) {  
         
       // call generate() method to get security number
       String pwd = generate();  
         
       // print password
       System.out.println("Password generated by Custom Utility Method is:"+pwd);  
         
   }  
     
   // create generate() method that find the password
   public static String generate() {  
         
       // generate a string that contains 4(2uppercase+2lowercase) alphabets and 2 digits
        Stream<Character> dp = Stream.concat(getRandomNumbers(2),  
                Stream.concat(getRandomSpecialChars(2),  
                        Stream.concat(getRandomAlphabets(2, true), getRandomAlphabets(2, false))));  
         
         
       List<Character> listOfChar = dp.collect(Collectors.toList());  
         
       // use shuffle()
       Collections.shuffle(listOfChar);  
         
       
       String password = listOfChar.stream()  
               .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)  
               .toString();  
                 
         
       return password;  
   }  
   // create getRandomSpecialChars() method that returns a Stream of special chars of the specified length  
   public static Stream<Character> getRandomSpecialChars(int length) {  
         
       Stream<Character> specialCharsStream;  
         
       // create instance of SecureRandom  
       Random random = new SecureRandom();  
         
       // use ints() method of random to get IntStream of special chars of the specified length  
       IntStream specialChars = random.ints(length, 33, 45);  
       specialCharsStream =  specialChars.mapToObj(data -> (char) data);  
         
       // return stream to the main() method  
       return specialCharsStream;  
   }  
     
   // create getRandomNumbers() method that returns a Stream of numbers of the specified length  
   public static Stream<Character> getRandomNumbers(int length) {  
         
       Stream<Character> numberStream;  
         
       // create instance of SecureRandom  
       Random random = new SecureRandom();  
         
       // use ints() method of random to get IntStream of number of the specified length  
       IntStream numberIntStream = random.ints(length, 48, 57);  
       numberStream = numberIntStream.mapToObj(data -> (char) data);  
         
       // return number stream to main() method  
       return numberStream;  
   }  
     
   // create getRandomAlphabets() method that returns either a stream of upper case chars or stream of lower case chars  
   // of the specified length based on the boolean variable check  
   public static Stream<Character> getRandomAlphabets(int length, boolean check) {  
         
       Stream<Character> lowerUpperStream;  
         
       // for lower case stream  
       if(check == true) {  
           // create instance of SecureRandom  
           Random random = new SecureRandom();  
             
           // use ints() method of random to get IntStream of lower case letters of the specified length  
           IntStream lCaseStream = random.ints(length, 'a', 'z');  
           lowerUpperStream =  lCaseStream.mapToObj(data -> (char) data);  
       }  
       // for upper case stream  
       else {  
           // create instance of SecureRandom  
           Random random = new SecureRandom();  
             
           // use ints() method of random to get IntStream of upper case letters of the specified length  
           IntStream uCaseStream = random.ints(length, 'A', 'Z');  
           lowerUpperStream =  uCaseStream.mapToObj(data -> (char) data);  
       }  
         
       // return lowerUpperStream to main() method  
       return lowerUpperStream;  
         
   }  
     
}  
